
buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven { url 'https://mvnrepository.com' }
		maven { url 'http://dl.bintray.com/rick-beton/maven/' }
		maven { url 'https://jitpack.io' }
	}

	dependencies {
		// Spring Boot
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${property('spring-boot.version')}"

		// Kotlin & Gradle Support
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${property('kotlin.version')}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:${property('kotlin.version')}"
		classpath "net.researchgate:gradle-release:${property('gradle-release.version')}"

		// Joda Time
		classpath "joda-time:joda-time:${property('joda-time.version')}"

		// Jadira
		classpath "org.jadira.usertype:usertype.core:${property('jadira.version')}"

		// Lombok
		classpath "org.projectlombok:lombok:1.18.8"

		// Kotlin JPA
		classpath "org.jetbrains.kotlin.plugin.jpa:org.jetbrains.kotlin.plugin.jpa.gradle.plugin:1.3.31"

		// Kotlin Database DSL
		classpath "org.jetbrains.exposed:exposed:${property('exposed.version')}"

		// Sass Support
		classpath 'com.github.fgiannesini.libsass.gradle.plugin:libsass-gradle-plugin:+'

	}
}

plugins {
	id 'java'
	id 'org.jetbrains.kotlin.jvm' version '1.3.50'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.50'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.50'

	id 'org.springframework.boot' version '2.1.3.RELEASE'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.fgiannesini.libsass.gradle.plugin'

group = "${property('group')}"
version = "${property('version')}"

sourceCompatibility = "${property('java.version')}"

buildDir = "$projectDir/target"

repositories {
	jcenter()
	mavenCentral()
	maven { url 'https://mvnrepository.com' }
	maven { url 'http://dl.bintray.com/rick-beton/maven/' }
	maven { url 'https://jitpack.io' }
}

dependencies {
	compile "org.projectlombok:lombok:1.18.8"

	// Kotlin Jackson Serialization
	compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

	// Joda Time
	compile "joda-time:joda-time:${property('joda-time.version')}"
	
	// Jadira
	compile "org.jadira.usertype:usertype.core:${property('jadira.version')}"

	// Kotlin Database DSL
	compile "org.jetbrains.exposed:exposed:${property('exposed.version')}"

	// Database connector & drivers
	compile "com.zaxxer:HikariCP:${property('hikari-cp.version')}"
	implementation "mysql:mysql-connector-java:${property('mysql-connector-version')}"
	implementation "org.mariadb.jdbc:mariadb-java-client:${property('mariadb-connector-version')}"

	compile group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.6'

	// Spring Boot
	compile "org.springframework:spring-jdbc"
	compile "org.springframework.boot:spring-boot-starter"
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-mail"
	compile "org.springframework.boot:spring-boot-starter-mustache"
	compile "org.springframework.boot:spring-boot-starter-security"
	compile "org.springframework.boot:spring-boot-starter-data-jpa"

	// Kotlin Support
	compile "org.jetbrains.kotlin:kotlin-stdlib:${property('kotlin.version')}"
	compile "org.jetbrains.kotlin:kotlin-reflect:${property('kotlin.version')}"

	testCompile "junit:junit:${property('junit.version')}"
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "org.jetbrains.kotlin:kotlin-test-junit:${property('kotlin.version')}"
}

springBoot {
	mainClassName = 'com.entremp.core.entremp.EntrEmpAppKt'
}

sourceSets {
	main.java.srcDirs += 'src/main/kotlin/'
	test.java.srcDirs += 'src/test/kotlin/'
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

//Relative paths from resources can be used if target directory already exists, otherwise absolute path from project root should be used.
libSassParameters {
	//Type: String Mandatory
	//File path to compile (normally import other scss files)
	//Can be overridden for production task
	inputFilePath = "src/main/resources/static/styles/main.scss"

	//Type: String Mandatory
	//Compiled file path
	//Can be overridden for production task
	outputFilePath = "src/main/resources/static/css/production/output.css"

	//Directory to watch for continuous compilation
	watchedDirectoryPath = "src/main/resources/static/styles"

	//Type: Boolean Default: false
	//'true' embeds the source map as a data URI
	//Can be overridden for production task
	sourceMapEmbed = true

	//Type: Boolean Default: false
	//'true' enables additional debugging information in the output file as CSS comments
	//Can be overridden for production task
	//sourceComments = false

	//Type: Boolean Default: false
	//'true' values disable the inclusion of source map information in the output file
	//Can be overridden for production task
	//omitSourceMappingURL = false

	//Type: Boolean Default: false
	//'true' includes the contents in the source map information
	//Can be overridden for production task
	//sourceMapContents = false

	//Type: String Default: 'scss'
	//Input syntax 'scss' or 'sass'
	//Can be overridden for production task
	//inputSyntax "scss"

	//Type: Integer Default: 5
	//Used to determine how many digits after the decimal will be allowed. For instance, if you had a decimal number of 1.23456789 and a precision of 5, the result will be 1.23457 in the final CSS.
	//Can be overridden for production task
	//precision 5

	//Type: String
	//Path of source file to generate if not embedded
	//Can be overridden for production task
	//sourceMapFilePath "css/output.css.map"

	//Type: String Default: nested Values: nested, expanded, compact, compressed
	//Determines the output format of the final CSS style.
	//Can be overridden for production task
	//outputStyle "nested"

	//Type: String Default: ""
	//Paths that LibSass can look in to attempt to resolve your @import declarations. When using data, it is recommended that you use this.
	//';' is the path separator for Windows
	//':' is the path separator for Linux
	//Can be overridden for production task
	//includePaths "scss-lib"

	//Type: String
	//Installation folder for bourbon sources
	bourbonInstallationPath "scss"

	//Type: String
	//If a specific version of bourbon is necessary
	//bourbonVersion "4.2.6"

	//Type: String
	//Installation folder for compass sources
	compassInstallationPath "src/main/resources/static/styles"

	//Type: String
	//If a specific version of compass is necessary
	//compassVersion "1.0.3"

	//Override parameters for task "compileLibSassProduction"
	libSassProductionParameters {
		outputStyle "compressed"

		outputFilePath = "src/main/resources/static/css/production/output.css"
	}
}